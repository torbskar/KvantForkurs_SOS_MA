# Omkoding av variable 


```{r}
#| echo: false
invisible(Sys.setlocale(locale='no_NB.utf8'))  # Hvis æøå ikke vises riktig kan du endre "locale" til norsk utf8 encoding med denne koden. 
```



```{r }
#| warning: false
#| message: false
#| error: false
library(haven)       # Importere data fra SAS, SPSS og Stata
library(tidyverse)   # Pakker for generell datahåndtering og grafikk
library(labelled)    # Håndtering av variable med labler, importert fra annen software
library(forcats)     # Lettere omkoding av faktorvariable
library(gtsummary)



```


I denne delen skal vi bruke et uttrekk NorLAG som ikke er ryddet skikkelig i forkant. Kategoriske variable er riktignok gjort om til factor-variable, men det er beholdt ulike typer missing-verdier som vi ellers ville luket bort. 

```{r}
#| warning: false
#| echo: false
#| error: false
#| message: false


infilbane <- "C:/Users/torbskar/OneDrive - Universitetet i Oslo/Dokumenter/Undervisning/SOS4020_forkurs/data2023/rOBH3y10/"
utfilbane <- "C:/Users/torbskar/OneDrive - Universitetet i Oslo/Dokumenter/Undervisning/SOS4020_forkurs/data2023/data_tilDeling/"

# data
faste <- read_stata( paste0(infilbane, "NorLAG-lengde-faste.dta"), encoding = "utf-8")
lang <- read_stata( paste0(infilbane, "NorLAG-lengde-intervju.dta"), encoding = "utf-8")

norlag_ex <- merge(faste, lang, by = "ref_nr") %>% 
  filter(iodeltakelse == 1 |  
           iodeltakelse == 2 & round %in% c(1, 3) | 
           iodeltakelse == 3 & round %in% c(2, 3) |
           iodeltakelse == 4 & round %in% c(1) |
           iodeltakelse == 5 & round %in% c(1, 2) |
           iodeltakelse == 6 & round %in% c(2)
  ) %>% 
  select(iokjonn, wr117zz) %>% 
  mutate(wr117zz = as_factor(wr117zz), 
         iokjonn = as_factor(iokjonn)) %>% 
  labelled::unlabelled()

glimpse(norlag_ex)

```



## Endre variabelnavn med `rename` og `mutate`





## Kontinuerlige variable 
Å omkode kontinuerlige variable er i utgangspunktet det enkleste. Dette er tall og man kan gjøre normale regneoperasjoner på dem. 





## Tekstvariable (strings)




## Factorvariable 
R har en egen variabeltype for kategoriske variable som kalles "factor". I utgangspunktet er kategoriske variable mer å regne som tekstvariable enn som tall, men i en del beregninger vil softwaren bruke numeriske verdier uansett. Hvis man gjør om en tekst-variabel til en factor-variabel beholdes teksten, men kategoriene numeriske verdier 1, 2, 3, ... osv. Disse tallene kan du tenke på som rekkefølgen på kategoriene. For kategoriske variable er det jo ikke noen egentlig rekkefølge, men det kan være grunner til å foretrekke rekkfølgen av andre grunner som vi kommer tilbake til. 

Hvis variabelen er ordnet f.eks. på en skala fra 1 til 5 eller annen naturlig rekkefølge^[Noen ganger kalles slike variable å være på  "ordinalnivå"], så kan man også angi dette. 


### Få oversikt over factor-levels med `levels()`

```{r}
levels(norlag_ex$wr117zz)
```


### Enkel omkoding med `fct_recode()` og `fct_collapse()` 


### Endre rekkefølgen på faktorene med `fct_reorder()`



## Betinget omkoding med `ifelse()` og `case_when()`





Du kan lære mer om effektiv håndtering av kategoriske variable med [forcats-pakken](https://forcats.tidyverse.org/articles/forcats.html), som er en del av "tidyverse". 


## Factorvariable med skikkelig lang tekst
Når man omkoder en variabel må man skrive hele tekstverdien man ønsker endre, og det må være *nøyaktig* likt stavet. Særlig i survey-data vil disse tekststrengene kunne være lange og det gir jo større muligheter for å skrive feil og du kan få andre resultater enn forventet. Det kan også være vanskelig å finne feilen i lange tekststrenger! Så det er altså noe hærk. Kan man gjøre dette på en lurere måte? Minst mulig tårer? Ja, selvsagt. 

Vi jobber normalt med factorvariable for kategoriske variable. I NorLAG er variabelen wr117zz svar på et spørsmål om "Mulighet for å redusert arbeidstid (deltid)". Når denne variabelen er gjort om til factor kan man se hvilke verdier variabelen har med bruke av funksjonen *levels()* slik: 

```{r}
#| message: false 
#| warning: false
levels(norlag_ex$wr117zz)

table(norlag_ex$wr117zz)

``` 

La oss si at vi vil kode om slik at vi får en variabel som bare er om vedkommende har mulighet til å jobbe deltid eller ikke. De som allerede jobber deltid har jo åpenbart mulighet til det, så de skal kodes om til "Ja". De andre kategoriene er egentlig grunner til at det mangler data, så de skal settes til NA. En mulighet er da å omkode som følger: 



```{r}
#| message: false 
#| warning: false

norlag_omkodet <- norlag_ex %>%
  mutate(redarbtid = replace(wr117zz, wr117zz == "filter: jobber deltid", "Ja"), 
         redarbtid = replace(redarbtid, redarbtid == "filter: selvstendig næringsdrivende (NorLAG3 inkl frilanser/annet)", NA),
         redarbtid = replace(redarbtid, redarbtid == "filter: ikke i arbeid", NA),
         redarbtid = replace(redarbtid, redarbtid == "vil ikke svare", NA),
         redarbtid = replace(redarbtid, redarbtid == "vet ikke", NA),
         redarbtid = replace(redarbtid, redarbtid == "mangler data", NA),
         redarbtid = replace(redarbtid, redarbtid == "Deltok ikke i runden", NA)) %>% 
  droplevels()

norlag_omkodet %>% 
  select(redarbtid) %>% 
  gtsummary::tbl_summary()



```

Dette funker, men blir ganske mye tekst å skrive, og da kan man altså lett skrive feil. Husk at faktornivåene må angis helt nøyaktig slik de er skrevet! 
Merk at den siste funksjone, `droplevels`, bare fjerner faktor-levels som ikke er i bruk. 

I output for faktor-levels angir klammeparentesen gir rekkefølgen på disse verdiene. Vi kan bruke denne informasjonen direkte i omkodingen for å unngå å skrive så veldig mye. Når man bruker `levels()` får man en vektor med verdier, og disse kan man altså henvise til med rekkefølgen. Her er et eksempel for bare å bytte ut de som jobber deltid til "Ja": 


```{r}
#| message: false 
#| warning: false
norlag_omkodet <- norlag_ex %>%
  mutate(redarbtid = replace(wr117zz, wr117zz == levels(wr117zz)[3], "Ja")) %>% 
  droplevels()


```

Trikset her er altså å bruke `levels` og vise til hvilket nummer i rekkefølgen. Da unngår vi også faren for skrivefeil. 

Vi vil også kode om alle de andre verdiene, nummer 4-9 til NA. Det kan vi gjøre på samme måte, men vi behøver ikke skrive en ny linje for hver verdi. Den logiske operatoren `==` kan man bruke når man skal sjekke om to verdier er like. Hvis vi skal se om en verdi er lik en av flere mulige kan vi bruke `%in%` og så en liste med verdier. `levels` gir en liste med verdier, så da kan vi angi den direkte og alle verdiene 4 til 9 ved å skrive `4:9`. Samlet blir det da slik: 

```{r}
#| message: false 
#| warning: false
norlag_omkodet <- norlag_ex %>%
  mutate(redarbtid = replace(wr117zz, wr117zz == levels(wr117zz)[3], "Ja"), 
         redarbtid = replace(redarbtid, redarbtid %in% levels(wr117zz)[4:9], NA)) %>% 
  droplevels()

memisc::codebook(norlag_omkodet$redarbtid)

```




## Spesielle problemstillinger ved veldig mange kategorier

For disse eksemplene skal vi bruke et litt annet datasett, nemlig et lite uttrekk fra European Social Survey. Her er det 3 variable: yrkeskode, kjønn og politisk interesse. 

```{r}

polit <- read.csv2("data/politics.csv", colClasses = "character")

glimpse(polit)
```

Vi kan sjekke hvor mange kategorier det er ved å lage en tabell over kodene og se hvor mange det er. Det er imidlertid upraktisk da den tabellen tar veldig mye plass. Koden nedenfor gjør en enklere opptelling ved å trekke ut unike verdier og telle hvor mange det er: 

```{r}
antall_koder <- polit %>%  
  pull(isco08) %>%   # trekker ut en vektor med kun en variabel 
  unique() %>%       # beholder kun unike verdier 
  length()           # lengden på gjenværende vektor 

antall_koder

```

Det er altså `r antall_koder` unike yrkeskoder i datasettet. 



### Hierarkisk strukturerte tall som tekststrenger

Noen ganger er det hundrevis av verdier. Et slik eksempel er [yrkesklassifisering](http://www.ilo.org/public/english/bureau/stat/isco/isco88/major.htm) der hver type yrke har en spesifikk kode. Det finnes mange typer yrker, så det er omlag 800 koder. For de fleste typer analyser er dette altfor detaljert og du trenger å gruppere til færre kategorier. SSB har en [kodeliste offentlig tilgjengelig](https://www.ssb.no/arbeid-og-lonn/sysselsetting/artikler/yrkeskatalogen). Kort fortalt er det en kode med 4 siffer, der det første sifferet er en grov gruppering, og de etterfølgende sifrene innebærer en økt detaljeringsgrad innenfor grupperingen angitt ved første siffer.

Hvis du skulle omkodet yrker slik som forklart i et tidligere avsnitt om omkoding ville det tatt veldig lang tid, men det ville også være veldig lett å gjøre feil. Det vil rett og slett være et mareritt å de-bugge koden for å finne feil eller kvalitetssjekke. Altså: en slik tilnærming er helt uaktuelt. En langt bedre tilnærming er å bare trekke ut det første sifferet fra koden. Funksjonen `str_sub()` gjør akkurat slike ting ved å angi hvilken del av tekststrengen du vil trekke ut, angitt ved posisjonen du starter ved og slutter ved. Her er det altså første posisjon. 



```{r}
polit <- polit %>% 
  mutate(occupation = str_sub(isco08, start = 1, end = 1)) 

polit %>% 
  select(gndr, occupation) %>% 
  tbl_summary(by = gndr)


```



### Bruke kataloger for kodeverk 
Noen ganger har slike lange lister med unike koder en standard gruppering som ikke er hierarkisk, eller man ønsker å lage en annen type gruppering av andre grunner. Et slikt eksempel er gruppering av yrker etter klasseskjemaer, slik som f.eks. **ORDC class schema** utviklet av [HISTCLASS-prosjektet](https://www.sv.uio.no/iss/english/research/projects/histclass/). Dette er et kodeskjemae for isco-koder til klasser og en katalog er tilgjengelig fra prosjektets hjemmeside. Det er omtrent 800 unike verdier og de er lagret i et Excel-format med gruppering for hver kode. De første linjene i arket ser ut som følgende:  

![](images/isco_excel.png) 

Dette Excel-arket er også lagt til rette for omkoding med bruk av Stata, men du kan se bort fra de siste kolonnene. 

Filen kan leses inn med `read_excel()`, der første linje typisk leses inn som variabelnavn. Men i dette tilfellet skal ikke de første linjene brukes og flere kolonner skal heller ikke brukes. Derfor ber vi R droppe de første linjenene, endrer variabelnavn og beholder kun isco-kodene og tilhørende ORDC-grupperingen. Variabelnavn bør ikke inkludere mellomrom, så vi legger til et argument som endrer til gyldige variabelnavn ved å bytte ut mellomrom med punktum. Vi også spesifiserer `col_types = "text"` for å unngå at tallverdier tolkes som numeriske verdier. 

```{r}
#| echo: TRUE
#| warning: FALSE
list.files("data/")
isco <- readxl::read_excel(path = "data/CODES_isco88_ordc.xlsx", skip = 4, .name_repair = "universal", col_types = "text") %>% 
  select(2,9) 
head(isco)
```

Now, we can merge the data with this catalogue. So that every record in the catalogue is merged to each record with the same code. To do this, we use `left_join()`, and store in a new object. 


```{r, echo=TRUE, warning=FALSE}
isco <- isco %>% 
  rename(isco08 = ISCO.88.code)

polit2 <- left_join(polit, isco, by = "isco08")

head(polit2)

```

What happened here is that the recoding happened almost automatically by adding a new column with the new variable. 

Now, you can make e.g. a cross-tabulation of social class by gender. 

```{r, echo=TRUE, warning=FALSE}
polit2 %>% 
  select(ORDC_YRK, gndr) %>% 
  tbl_summary(by = gndr)

```



### Noen ganger finnes det en pakke
Siden R støtter pakker laget av brukere rundt omkring i verden, så er det alltids en sjanse for at noen har laget noe lurt som fikser akkurat ditt problem. Du kan altså ha flaks. 

Når det gjelder omkoding av ISCO-koder til klasseskjemaer, så har noen faktisk gjort dette. Pakken {DIGCLASS} koder om til flere forskjellige klasseskjemaer ganske greit. Se gjerne nærmere på [vignetten til pakken](https://digclass.pages.code.europa.eu/digclass/index.html).

Denne pakken finnes imidlertid ikke på CRAN i skrivende stund. Derimot finnes den tilgjengelig på nettet. Følgende kode installerer pakken. Hvis du får feilmelding om at du trenger {devtools}, så installer denne pakken først på vanlig måte. 

```{r}
#| eval: FALSE
#| message: false 
devtools::install_git("https://code.europa.eu/digclass/digclass.git")

```


Denne pakken inneholder også funksjonen for å rydde opp i isco-kodene. Det er noen vanlige problemer som omkodes enkelt med `repair_isco`. I følgende kode sjekkes isco-kodene *før* funksjonen `isco88_to_ordc` brukes til selve omkodingen. Den har en versjon som gir tallkode og en som gir tekstverdier, som er kjekt, så da kjøres begge to. 

Denne funksjonen spytter også ut mange beskjeder i output som vi strengt tatt ikke trenger. Den melder fra om alle verdier som ikke inngår i klasseskjemaet og som derfor settes til NA. Det er fint, men tar i dette tilfellet ganske mye plass. Vet å bruke funksjonen `suppressMessages({...})` og parenteser rundt hele koden slipper vi dette. Normalt skal du ikke bruke denne funksjonen da du vanligvis vil ha slike beskjeder. Her tar det bare litt mye plass. 

```{r}
library(DIGCLASS)

suppressMessages({
polit3 <- polit %>% 
  mutate(isco08 = repair_isco(.$isco08), 
         orcd = isco88_to_ordc(isco08, label = FALSE), 
         orcd_lab = isco88_to_ordc(isco08, label = TRUE))
})

head(polit3)

```

Da kan vi lage tabellen omigjen bare for å sjekke at vi får samme svar. 

```{r}
#| warning: false
#| error: false
#| message: false
polit3 %>% 
  select(orcd, gndr) %>% 
  tbl_summary(by = gndr)

```
```



## Gjøre samme ting med mange variable med `across()`




