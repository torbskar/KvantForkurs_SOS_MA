# Omkoding av variable 

```{r }
#| warning: false
#| message: false
library(haven)       # Importere data fra SAS, SPSS og Stata
library(tidyverse)   # Pakker for generell datahåndtering og grafikk
library(labelled)    # Håndtering av variable med labler, importert fra annen software
library(forcats)     # Lettere omkoding av faktorvariable
library(gtsummary)

```



## Endre variabelnavn med `rename` og `mutate`





## Kontinuerlige variable 
Å omkode kontinuerlige variable er i utgangspunktet det enkleste. Dette er tall og man kan gjøre normale regneoperasjoner på dem. 





## Tekstvariable (strings)




## Factorvariable 
R har en egen variabeltype for kategoriske variable som kalles "factor". I utgangspunktet er kategoriske variable mer å regne som tekstvariable enn som tall, men i en del beregninger vil softwaren bruke numeriske verdier uansett. Hvis man gjør om en tekst-variabel til en factor-variabel beholdes teksten, men kategoriene numeriske verdier 1, 2, 3, ... osv. Disse tallene kan du tenke på som rekkefølgen på kategoriene. For kategoriske variable er det jo ikke noen egentlig rekkefølge, men det kan være grunner til å foretrekke rekkfølgen av andre grunner som vi kommer tilbake til. 

Hvis variabelen er ordnet f.eks. på en skala fra 1 til 5 eller annen naturlig rekkefølge^[Noen ganger kalles slike variable å være på  "ordinalnivå"], så kan man også angi dette. 


### Få oversikt over factor-levels med `levels()`



### Enkel omkoding med `fct_recode()` og `fct_collapse()` 


### Endre rekkefølgen på faktorene med `fct_reorder()`



## Betinget omkoding med `ifelse()` og `case_when()`





Du kan lære mer om effektiv håndtering av kategoriske variable med [forcats-pakken](https://forcats.tidyverse.org/articles/forcats.html), som er en del av "tidyverse". 


## Factorvariable med skikkelig lang tekst
```{r}
#| message: false 
#| warning: false
norlag <- read_stata("data/norlag_panel2022.dta") %>% 
    mutate(across( where(is.labelled) ,  ~replace(., 
                                        . %in% c(997, 998, 999, 99999, 999999), 
                                        NA))) %>%
  # For hele datasettet fjernes ikke-brukte labler 
  drop_unused_value_labels() %>% 
  # Så gjør alle variable om til mer ordinære R-format. Dvs. gjøre labler om til factor
  unlabelled()

```


Noen ganger har man et datasett som allerede er omgjort med factor-variable. Eller du har en eller annen grunn til å ikke gå tilbake til et tidligere steg for å omkode. Men du har factor-levels med skikkelig lang tekst kan det være noe drit å kode om. Kan man gjøre dette på en lurere måte? Minst mulig tårer? Ja, selvsagt. 

I NorLAG er variabelen wr117zz svar på et spørsmål om "Mulighet for å redusert arbeidstid (deltid)". Når denne variabelen er gjort om til factor kan man se hvilke verdier variabelen har med bruke av funksjonen *levels()* slik: 

```{r}
#| message: false 
#| warning: false
levels(norlag$wr117zz)

table(norlag$wr117zz)

``` 

La oss si at vi vil kode om slik at vi får en variabel som bare er om vedkommende har mulighet til å jobbe deltid eller ikke. De som allerede jobber deltid har jo åpenbart mulighet til det, så de skal kodes om til "Ja". De andre kategoriene er egentlig grunner til at det mangler data, så de skal settes til NA. En mulighet er da å omkode som følger: 



```{r}
#| message: false 
#| warning: false
norlag_omkodet <- norlag %>%
  mutate(redarbtid = replace(wr117zz, wr117zz == "filter: jobber deltid", "Ja"), 
         redarbtid = replace(redarbtid, redarbtid == "filter: selvstendig næringsdrivende (NorLAG3 inkl frilanser/annet)", NA), 
         redarbtid = replace(redarbtid, redarbtid == "filter: ikke i arbeid", NA), 
         redarbtid = replace(redarbtid, redarbtid == "vil ikke svare", NA),
         redarbtid = replace(redarbtid, redarbtid == "vet ikke", NA),
         redarbtid = replace(redarbtid, redarbtid == "mangler data", NA),
         redarbtid = replace(redarbtid, redarbtid == "Deltok ikke i runden", NA)) %>% 
  droplevels()

```

Dette funker, men blir ganske mye tekst å skrive, og da kan man også lett gjøre skrivefeil. Husk at faktornivåene må angis helt nøyaktig slik de er skrevet! 
Merk at den siste funksjone, *droplevels()*, bare fjerner faktor-levels som ikke er i bruk. 

I output for faktor-levels angir klammeparentesen gir rekkefølgen på disse verdiene. Vi kan bruke denne informasjonen direkte i omkodingen for å unngå å skrive så veldig mye. Når man bruker levels() får man en liten vektor med verdier, og disse kan man altså henvise til med rekkefølgen. Her er et eksempel for bare å bytte ut de som jobber deltid til "Ja": 


```{r}
#| message: false 
#| warning: false
norlag_omkodet <- norlag %>%
  mutate(redarbtid = replace(wr117zz, wr117zz == levels(wr117zz)[3], "Ja")) %>% 
  droplevels()


```

Trikset her er altså å bruke `levels()` og vise til hvilket nummer i rekkefølgen. Da unngår vi også faren for skrivefeil.  

Vi vil også kode om alle de andre verdiene, nummer 4-9 til NA. Det kan vi gjøre på samme måte, men vi behøver ikke skrive en ny linje for hver verdi. Den logiske operatoren == kan man bruke når man skal sjekke om to verdier er like. Hvis vi skal se om en verdi er lik en av flere mulige kan vi bruke %in% og så en liste med verdier. levels() gir en liste med verdier, så da kan vi angi den direkte og alle verdiene 4 til 9 ved å skrive 4:9. Samlet blir det da slik: 

```{r}
#| message: false 
#| warning: false
norlag_omkodet <- norlag %>%
  mutate(redarbtid = replace(wr117zz, wr117zz == levels(wr117zz)[3], "Ja"), 
         redarbtid = replace(redarbtid, redarbtid %in% levels(wr117zz)[4:9], NA)) %>% 
  droplevels()

memisc::codebook(norlag_omkodet$redarbtid)

```




## Spesielle problemstillinger ved veldig mange kategorier

For disse eksemplene skal vi bruke et litt annet datasett, nemlig et lite uttrekk fra European Social Survey. Her er det 3 variable: yrkeskode, kjønn og politisk interesse. 

```{r}
polit <- read.csv2("data/politics.csv", colClasses = "character")

glimpse(polit)
```

Vi kan sjekke hvor mange kategorier det er ved å lage en tabell over kodene og se hvor mange det er. Det er imidlertid upraktisk da den tabellen tar veldig mye plass. Koden nedenfor gjør en enklere opptelling ved å trekke ut unike verdier og telle hvor mange det er: 

```{r}
antall_koder <- polit %>%  
  pull(isco08) %>%   # trekker ut en vektor med kun en variabel 
  unique() %>%       # beholder kun unike verdier 
  length()           # lengden på gjenværende vektor 

antall_koder

```

Det er altså `r antall_koder` unike yrkeskoder i datasettet. 



### Hierarkisk strukturerte tall som tekststrenger

Noen ganger er det hundrevis av verdier. Et slik eksempel er [yrkesklassifisering](http://www.ilo.org/public/english/bureau/stat/isco/isco88/major.htm) der hver type yrke har en spesifikk kode. Det finnes mange typer yrker, så det er omlag 800 koder. For de fleste typer analyser er dette altfor detaljert og du trenger å gruppere til færre kategorier. SSB har en [kodeliste offentlig tilgjengelig](https://www.ssb.no/arbeid-og-lonn/sysselsetting/artikler/yrkeskatalogen). Kort fortalt er det en kode med 4 siffer, der det første sifferet er en grov gruppering, og de etterfølgende sifrene innebærer en økt detaljeringsgrad innenfor grupperingen angitt ved første siffer.

Hvis du skulle omkodet yrker slik som forklart i et tidligere avsnitt om omkoding ville det tatt veldig lang tid, men det ville også være veldig lett å gjøre feil. Det vil rett og slett være et mareritt å de-bugge koden for å finne feil eller kvalitetssjekke. Altså: en slik tilnærming er helt uaktuelt. En langt bedre tilnærming er å bare trekke ut det første sifferet fra koden. Funksjonen `str_sub()` gjør akkurat slike ting ved å angi hvilken del av tekststrengen du vil trekke ut, angitt ved posisjonen du starter ved og slutter ved. Her er det altså første posisjon. 



```{r}
polit <- polit %>% 
  mutate(occupation = str_sub(isco08, start = 1, end = 1)) 

polit %>% 
  select(gndr, occupation) %>% 
  tbl_summary(by = gndr)


```



### Bruke kataloger for kodeverk 
Sometimes, such long list of unique codes have a standard grouping that are not hierarchical. One such example is the **ordc class schema** as developed by the [HISTCLASS-project homepage](https://www.sv.uio.no/iss/english/research/projects/histclass/). This is a coding schema for isco-codes to classes, and a catalogue is available from the homepage. As there are about 800 unique values and they are stored in Excel-format with corresponding grouping for each code. The first lines in Excel-file looks lik this:  

![](images/isco_excel.png) 

This file can be read into R using `read_excel()`, where the first line is typically read as variable names. But the first lines are not to be used, and neither are several columns. 

To read it into R, we need to skip the lines not needed and change the variable names. In this example, we only need the isco-kodes and the ordc_yrk codes. Variable names should not include spaces, so we include an argument for ensuring universal valid variable names. That substitutes white space with punctuation. 
We also specify `col_types = "text"` to avoid the values being interpreted as numeric. 

```{r}
#| echo: TRUE
#| warning: FALSE

isco <- readxl::read_excel(path = "data/3_codes_isco88_ordc.xlsx", skip = 4, .name_repair = "universal", col_types = "text") %>% 
  select(2,9) 
head(isco)
```

Now, we can merge the data with this catalogue. So that every record in the catalogue is merged to each record with the same code. To do this, we use `left_join()`, and store in a new object. 


```{r, echo=TRUE, warning=FALSE}
isco <- isco %>% 
  rename(isco08 = ISCO.88.code)

polit2 <- left_join(polit, isco, by = "isco08")

head(polit2)

```

What happened here is that the recoding happened almost automatically by adding a new column with the new variable. 

Now, you can make e.g. a cross-tabulation of social class by gender. 

```{r, echo=TRUE, warning=FALSE}
polit2 %>% 
  select(ORDC_YRK, gndr) %>% 
  tbl_summary(by = gndr)

```




## Gjøre samme ting med mange variable med `across()`




