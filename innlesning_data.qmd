# Innlesning av data

Vi skal bruke følgende pakker i dette kapittelet

```{r}
#| echo: true
#| message: false
#| warning: false
library(tidyverse)
library(haven)
library(labelled)
library(readxl)

```

```{r}
#| echo: false
#| warning: false
#| error: false 

#Sys.setlocale(locale='no_NB.utf8')
#memisc::codebook(norlag$iolandb)



utfilbane <- "C:/Users/torbskar/OneDrive - Universitetet i Oslo/Dokumenter/Undervisning/SOS4020_forkurs/data2023/data_tilDeling/"

norlag_eksempel <- readRDS(paste0(utfilbane, "norlag.rds")) %>% 
  select(ref_nr, round, ioalder, iolandb, iokjonn, pa001c, pa300, hc230, hc231, va207, hcMCS12, hcPCS12 )


# glimpse(norlag)
# 
# library(labelled)


saveRDS(norlag_eksempel, "data/norlag_eksempel.rds")

norlag_eksempel_rdata <- norlag_eksempel 
save(norlag_eksempel_rdata, file = "data/norlag_eksempel.Rdata")

write_csv(norlag_eksempel, "data/norlag_eksempel.csv")

openxlsx::write.xlsx(norlag_eksempel, file = "data/norlag_eksempel.xlsx")


write_dta(norlag_eksempel, path = "data/norlag_eksempel.dta")

write_sav(norlag_eksempel, path = "data/norlag_eksempel.sav")

write_sas(norlag_eksempel, path = "data/norlag_eksempel.sas7bdat")


```

## Generelt om ulike dataformat
Data kan være lagret i mange ulike formater, men det er også problemstillinger knyttet til *hvordan* dataene er lagret i et gitt format. Dette handler delvis om hvordan noen har valgt å lagre og distribuere data, ikke bare om dataformatet i seg selv.

Det kan være vanskelig å skille mellom hvorvidt utfordringene du møter skyldes dataformatet, softwaren man bruker eller valg andre har tatt. Det kan være flere av disse, men som hovedregel er problemet at data ofte ikke er distribuert i et universelt format. Permanent lagring og distribusjon av data er krevende, men ikke temaet her.

Uansett: du vil ofte få data i et format som ikke er tilrettelagt verken i eller for R. Å gjøre om data fra et format til et annet kan være en avgjørende oppgave for å få gjort noe som helst.

Dette kan være krøkete og du har virkelig muligheten til å kløne det til skikkelig. For at du skal slippe det gir dette kapittelet en oppskrift for å håndtere slike data slik at du kan jobbe videre med dem i R på en hensiktsmessig måte.

R kan imidlertid håndtere det aller meste av dataformater på en eller annen måte, men vi ser bare på de aller mest vanlige her.


### rds

Rds-formatet er et format særlig egnet for R. Her er et eksempel med et lite utdrag fra NorLAG

```{r}
norlag_rds <- readRDS("data/norlag_eksempel.rds")
glimpse(norlag_rds)

```



### Laste workspace med `load()`

Filer av typen .Rdat eller .Rdata er egentlig ikke et dataformat, men brukes tidvis for å lagre datafiler. Man kan lagre en eller flere datafiler i samme .Rdat fil på disk.

Du kan også lagre et "speilbilde" av hele ditt workspace på denne måten slik at du kan lukke R og så åpne R senere akkurat på det stedet du var i arbeidet. Det kan være kjekt, men forutsetter at du husker hva du drev med forrige gang. Den klare anbefalingen er derfor å ikke bruke dette rutinemessig.

Her bruker man `load` som laster dette speilbildet og objektet med dataene i beholder det navnet de hadde da de ble laget. Se i fanen "Environment" i Rstudio om det har dukket opp noe nytt der, for å finne navnet hvis du ikke vet det fra før. I dette eksempelet er dataene lagret i et objekt som "norlag_eksempel_rdata" som altså er lagret i en fil som hetere "norlag_eksempel.Rdata". Ved lasting av filen dukker objektet opp under "Enviroment"-fanen, men du får ikke noen melding av noe slag. Men er altså tilgjengelig i minnet i R. Her er koden: 

```{r}
load("data/norlag_eksempel.Rdata")
glimpse(norlag_eksempel_rdata)

```



### csv-filer

Såkalte csv-format er ren tekstformat der verdiene i kollonnene har skilletegn. Skilletegnet er nesten alltid komma eller semikolon, men kan i prinsippet være hva som helst. Hvis du får feilmeldinger og det ser skikkelig rart ut, så åpen filen i Notepad (eller annet ren-tekst program) og sjekk. I koden nedenfor er det spesifisert komma som skilletegn, men hvis det er semikolon endrer du det til `sep =","`.  I utgangspunket forventer `read.csv` at det er kommaseparert, så koden vil funkere her uten den delen. 

```{r}
norlag_eksempel_csv <- read.csv("data/norlag_eksempel.csv", sep =",")
glimpse(norlag_eksempel_csv)
```

### Excel

Forbløffende mye data foreligger i Excel-format. Det finnes egne funksjoner for å jobbe direkte med excel-filer. Blant annet pakken `readxl` gir funksjoner til å lese inn denne typen filer. Det finnes også andre pakker for å håndtere Excel-filer, men hvis formålet bare er å lese inn data, så gjør denne pakken jobben. Husk å laste pakken først. Her er et eksempel:

```{r}
library(readxl)
norlag_xlsx <- read_excel("data/norlag_panel.xlsx")
glimpse(norlag_xlsx)

```

Men Excel-filer kan ha en litt mer komplisert struktur enn dette eksempelet. Data kan ligge i ulike faner i Excel-filen, men det kan da håndteres med å legge til argumentet `sheet = ...`. Hvis excel-arket inneholder mye tekst eller andre ting som gjør at de faktiske dataene kommer litt lengre ned, så kan det spesifiseres hvilket celleområde som det skal leses inn fra ved `range = ...` eller bare hoppe over noen rader med `skip = ...`. 

På dette kurset skal vi ikke bruke Excel-filer, men det er stor sannsynlighet for at du vil få bruk for dette senere en gang. 


### Proprietære format: Stata, SPSS og SAS

#### Stata

```{r}
norlag_dta <- read_stata("data/norlag_panel.dta")
glimpse(norlag_dta)
```
Legg merke til at den andre kolonnen her viser hva slags variabeltype det er. `<dbl>` betyr at det er numerisk variabel^(Det finnes flere typer numeriske variable som vi for praktiske analyser sjelden behøver å forholde oss til. `<dbl>` står for *Double* som er et lagringsformat som kan ta svært mange desimaler. Det kan også stå `<num>` som håndterer færre desimaler. Det er også vanlig med `<int>` som står for *Integer*, altså heltall uten desimaler.) På noen variable står det også `<dbl+lbl>` der `lbl` står for *labelled* som betyr at det finnes såkalte labler tilhørende variabelen. *Labler* er vanlig å bruke i programmene Stata og SPSS, men er ikke noe som vanligvis brukes i R. Men R leser det inn og kan håndtere dette helt fint. Men som hovedregel er det bedre å rydde opp slik at dataene blir slik vi vanligvis bruker det i R. Dette er grunnen til at dere får en bearbeidet versjon av NorLAG datasettet! 

Neste kapittel er spesielt om NorLAG i formatet `.rds`. Hvordan effektivt lese inn fra Stata til R og gjøre om labler er dekket i et appendiks. De av dere som senere skal jobbe med data levert ut fra Sikt kan ha behov for dette, og da kan dere ta en nærmere titt på appedikset. For dette forkurset og SOS4020 vil dere ikke trenge kunne akkurat det. 

#### SPSS og SAS
Andre vanlige dataformater er formater fra statistikkpakkene SPSS og SAS, med filhalene henholdsvis *.sav* og *.sas7bdat*. De leses inn på tilsvarende funksjoner tilpasset disse dataformatene. Her er eksempel for innlesning av SPSS-fil: 

```{r}
#| eval: FALSE
norlag_sav <- read_spss("data/norlag_panel.sav")
glimpse(norlag_sav)
```
Her er eksempel for innlesning av SAS-fil: 

```{r}
norlag_sas <- read_sas("data/norlag_panel.sas7bdat")
glimpse(norlag_sas)
```

### Dataformater for store data
Det finnes en hel rekke andre formater for spesielle formål, derav formater for store data. Med store data mener vi her enten at de er så store at det upraktisk lang tid å lese det inn - eller så store at det ikke er plass i minnet på datamaskinen. Formatene `feather` og `parquet` er varianter av det samme og håndteres med pakken *Arrow*. Det finnes også andre pakker for store data, men *Arrow* er nå den anbefalte. En annen grunn til det er at disse datasettene tillater sømløs bytte mellom programmeringsspråkene R og Python. Men det går laaaagt utenfor formålet med dette forkurset. 

For mer spesielle behov går det også an å koble mot databaser som MySQL, Spark, Oracle eller noe helt annet, og en oversikt [finnes her](https://cran.r-project.org/web/views/Databases.html).

Eneste du trenger være klar over akkurat nå er at R kan håndtere svært mange forskjellige dataformater og koble mot andre løsninger. Kanskje vil du trenge det en gang - kanskje ikke. 
