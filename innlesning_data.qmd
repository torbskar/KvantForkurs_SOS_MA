# Innlesning av data

Vi skal bruke følgende pakker i dette kapittelet 
```{r}
#| echo: true
#| message: false
#| warning: false
library(tidyverse)
library(haven)
library(labelled)

```



```{r}
#| echo: false
#| warning: false
#| error: false 


## OBS! Det er noen nummeriske med filter-verdier
library(tidyverse)
library(haven)

norlag <- read_stata("data/norlag_panel2022.dta", encoding = "utf-8") %>% 
  filter(iodeltagelse == 1 |  
           iodeltagelse == 2 & round %in% c(1, 3) | 
           iodeltagelse == 3 & round %in% c(2, 3) |
           iodeltagelse == 4 & round %in% c(1) |
           iodeltagelse == 5 & round %in% c(1, 2) |
           iodeltagelse == 6 & round %in% c(2)
         ) %>% 
  # generelle missing
    mutate(across( where(is.labelled) ,  ~replace(., 
                                        . %in% c(997, 998, 999, 99999, 999999), 
                                        NA))) %>%
  # noen spesielle missing - som kanskje gjelder overalt?
      mutate(across(where(is.labelled) ,  ~replace(., 
                                        . %in% c(994, 995, 996, 9996), 
                                        NA))) %>%
    # noen spesielle missing - som kanskje gjelder overalt?
      mutate(across(where(is.labelled) ,  ~replace(., 
                                        . %in% c(9993, 9994, 9995, 9996, 9997, 9998, 999), 
                                        NA))) %>%
  # inpartbankinnsk og fremover
        mutate(across(where(is.labelled) ,  ~replace(., 
                                        . %in% c(99999996,
                                                 999999995,
                                                 999999996,
                                                 999999999), 
                                        NA))) %>%
  mutate(across(where(is.labelled), ~replace(. ,
                                             str_sub(., 1, 7) == "filter:", NA))) %>% 
  labelled::drop_unused_value_labels() %>% 
  labelled::unlabelled() %>% 
  select(ref_nr, round, ioalder, iolandb, iokjonn, pa001c, pa300, yrke_panel)


# glimpse(norlag)
# 
# library(labelled)
# 
# look_for(norlag, "uenighet")


saveRDS(norlag, "data/norlag_panel.rds")

save(norlag, file = "data/norlag_panel.Rdata")

write_csv(norlag, "data/norlag_panel.csv")

openxlsx::write.xlsx(norlag, file = "data/norlag_panel.xlsx")


write_dta(norlag, path = "data/norlag_panel.dta")

write_sav(norlag, path = "data/norlag_panel.sav")

write_sas(norlag, path = "data/norlag_panel.sas7bdat")


```



Data kan være lagret i mange ulike formater, men det er også problemstillinger knyttet til *hvordan* dataene er lagret i et gitt format. Dette handler delvis om hvordan noen har valgt å lagre og distribuere data, ikke bare om dataformatet i seg selv. 

Det kan være vanskelig å skille mellom hvorvidt utfordringene du møter skyldes dataformatet, softwaren man bruker eller valg andre har tatt. Det kan være flere av disse, men som hovedregel er problemet at data ofte ikke er distribuert i et universelt format. Permanent lagring og distribusjon av data er krevende, men ikke temaet her. 

Uansett: du vil ofte få data i et format som ikke er tilrettelagt verken i eller for R. Å gjøre om data fra et format til et annet kan være en avgjørende oppgave for å få gjort noe som helst. 

Dette kan være krøkete og du har virkelig muligheten til å kløne det til skikkelig. For at du skal slippe det gir dette kapittelet en oppskrift for å håndtere slike data slik at du kan jobbe videre med dem i R på en hensiktsmessig måte. 

R kan imidlertid håndtere det aller meste av dataformater på en eller annen måte, men vi ser bare på de aller mest vanlige her. 


## Generelt om ulike dataformat


### rds
Rds-formatet er et format særlig egnet for R. 



### Laste workspace med `load()` 
Filer av typen .Rdat eller .Rdata er egentlig ikke et dataformat, men brukes tidvis for å lagre datafiler. Man kan lagre en eller flere datafiler i samme .Rdat fil på disk. 





Du kan også lagre et "speilbilde" av hele ditt workspace på denne måten slik at du kan lukke R og så åpne R senere akkurat på det stedet du var i arbeidet. Det kan være kjekt, men forutsetter at du husker hva du drev med forrige gang. Den klare anbefalingen er derfor å ikke bruke dette rutinemessig. 



### csv-filer 
Såkalte csv-format er ren tekstformat der verdiene i kollonnene har skilletegn. Skilletegnet er nesten alltid komma eller semikolon, men kan i prinsippet være hva som helst. Noen ganger vil slike 




### Excel
Forbløffende mye data foreligger i Excel-format. Det finnes egne funksjoner for å jobbe direkte med excel-filer. 




### Proprietære format: Stata, SPSS og SAS


#### Stata
```{r}
norlag_dta <- read_stata("data/norlag_panel.dta")
glimpse(norlag_dta)
```


#### SPSS 
```{r}
# norlag_sav <- read_stata("data/norlag_panel.sav")
# glimpse(norlag_sav)
```


#### SAS
```{r}
# norlag_sas <- read_stata("data/norlag_panel.sas7bdat")
# glimpse(norlag_sas)
```



### Dataformater for store data
Det finnes en hel rekke andre formater for spesielle formål, derav formater for store data. 

Formatene feather og parquet er varianter av det samme og håndteres med pakken *Arrow*. 

For mer spesielle behov går det også an å koble mot databaser som MySQL, Spark, Oracle eller noe helt annet, og en oversikt [finnes her](https://cran.r-project.org/web/views/Databases.html). 



