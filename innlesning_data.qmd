# Innlesning av data

Vi skal bruke følgende pakker i dette kapittelet 
```{r}
#| echo: true
#| message: false
#| warning: false
library(tidyverse)
library(haven)
library(labelled)

```



Data kan være lagret i mange ulike formater, men det er også problemstillinger knyttet til *hvordan* dataene er lagret i et gitt format. Dette handler delvis om hvordan noen har valgt å lagre og distribuere data, ikke bare om dataformatet i seg selv. 

Det kan være vanskelig å skille mellom hvorvidt utfordringene du møter skyldes dataformatet, softwaren man bruker eller valg andre har tatt. Det kan være flere av disse, men som hovedregel er problemet at data ofte ikke er distribuert i et universelt format. Permanent lagring og distribusjon av data er krevende, men ikke temaet her. 

Uansett: du vil ofte få data i et format som ikke er tilrettelagt verken i eller for R. Å gjøre om data fra et format til et annet kan være en avgjørende oppgave for å få gjort noe som helst. 

Dette kan være krøkete og du har virkelig muligheten til å kløne det til skikkelig. For at du skal slippe det gir dette kapittelet en oppskrift for å håndtere slike data slik at du kan jobbe videre med dem i R på en hensiktsmessig måte. 

R kan imidlertid håndtere det aller meste av dataformater på en eller annen måte, men vi ser bare på de aller mest vanlige her. 


## De mest vanlige dataformatene 


### csv-filer 


### rds



### Excel



## Laste workspace med `load()` 


### Proprietære format: Stata, SPSS og SAS




## Datasettet [NorLAG](https://norlag.nsd.no/)

```{r}
#| echo: false
#| warning: false
#| error: false 


## OBS! Det er noen nummeriske med filter-verdier
library(tidyverse)
library(haven)
norlag <- read_stata("data/norlag_panel2022.dta", encoding = "utf-8") %>% 
  filter(iodeltagelse == 1 |  
           iodeltagelse == 2 & round %in% c(1, 3) | 
           iodeltagelse == 3 & round %in% c(2, 3) |
           iodeltagelse == 4 & round %in% c(1) |
           iodeltagelse == 5 & round %in% c(1, 2) |
           iodeltagelse == 6 & round %in% c(2)
         ) %>% 
  # generelle missing
    mutate(across( where(is.labelled) ,  ~replace(., 
                                        . %in% c(997, 998, 999, 99999, 999999), 
                                        NA))) %>%
  # noen spesielle missing - som kanskje gjelder overalt?
      mutate(across(where(is.labelled) ,  ~replace(., 
                                        . %in% c(994, 995, 996, 9996), 
                                        NA))) %>%
    # noen spesielle missing - som kanskje gjelder overalt?
      mutate(across(where(is.labelled) ,  ~replace(., 
                                        . %in% c(9993, 9994, 9995, 9996, 9997, 9998, 999), 
                                        NA))) %>%
  # inpartbankinnsk og fremover
        mutate(across(where(is.labelled) ,  ~replace(., 
                                        . %in% c(99999996,
                                                 999999995,
                                                 999999996,
                                                 999999999), 
                                        NA))) %>%
  mutate(across(where(is.labelled), ~replace(. ,
                                             str_sub(., 1, 7) == "filter:", NA))) %>% 
  labelled::drop_unused_value_labels() %>% 
  labelled::unlabelled()

saveRDS(norlag, "data/norlag_panel.rds")

# norlag %>% 
#   select(iodeltagelse, round) %>% 
#   table()

```

Dette datasettet skal benyttes videre i SOS4020 og vi bruker litt tid på dette for å spare tid senere. Da blir det et problem mindre når SOS4020 starter for alvor. 


Det viktigste for dette kurset er at dere har et rimelig ryddig datasett å jobbe med slik at dere kan fokusere på estimering. Det opprinnelige datasettet er levert i Stata-format (se over) og det er en del utfordringer med å importere disse dataene bl.a. på grunn av hvordan de har valgt å kode [missing og filterverdier](https://norlag.nsd.no/filterverdier) og lagt denne typen metadata inn i Stataformatet. Disse tingene er ryddet opp i her. Datasettet norlag_panel.rds er altså konvertert til R-formatet rds. Dette datasettet kan da enkelt leses inn med `readRDS()` som følger: 

```{r}
norlag <- readRDS("data/norlag_panel.rds")
dim(norlag)

```






