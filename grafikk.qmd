# Grafikk med ggplot


## Grammar of graphics
I R er det mange funksjoner for å lage grafikk. Noen er spesialiserte og knyttet til spesielle analysemetoder og gir deg akkurat det du trenger. Vi skal her bruke et *generelt system* for grafikk som heter `ggplot` som kan brukes til all slags grafikk. Funksjonen *ggplot* er bygget opp som en *gramatikk* for grafisk fremstilling. Det ligger en teori til grunn som er utledet i boken ved omtrent samme navn: [The grammar of graphics](https://link.springer.com/book/10.1007/0-387-28695-0). Det er mye som kan sies om dette, men det viktige er at grafikken er bygget opp rundt noen bestanddeler. Når du behersker disse kan du fremstille nær sagt hva som helst av kvantitativ informasjon grafisk. 

Systemet er bygd opp med lagvis kode. Selve grafikken kan også legges på gradvis hvis man ønsker plotte flere ting i samme plot og følger da rekkefølgen på koden. For enkle plot som vi skal bruke her angir man i denne rekkefølgen og med en `+` mellom hver del (vanligvis per linje, men linjeskift spiller ingen rolle): 

1) Angi data og *hva* som skal plottes
1) Angi *hvordan* det skal plottes
1) Angi andre spesifikasjoner (farger, titler, koordinatsystemer osv)

Dette blir tydeligere i eksemplene og forklares underveis. 

* Det første argumentet i `ggplot` er data. Altså: hvilket datasett informasjonen hentes fra. 
* `aes()` spesifiserer *aestethics*, som er *hva* som skal plottes. Først og fremst hva som skal på x-akse og y-akse (og evt. z-akse), men også spesifikasjon av linjer (farge, linjetype) og fyllfarger, gjerne etter en angitt gruppering. 
* `geom_*` står for *geometric* og sier noe om hvordan data skal se ut. Det kan være punkter, histogram, stolper, linjer osv. 
* `coord_*` definerer koordinatsystemet. Stort sett blir dette bestemt av variablene. Men du kan også snu grafen eller definere sirkulært koordinatsystem, eller andre enklere ting. * `facet_*` definerer hvordan du vil dele opp grafikken i undergrupper





```{r}
#| echo: false
#| warning: false
#| message: false
library(tidyverse)
library(ggthemes)
library(ggforce)

utfilbane <- "C:/Users/torbskar/OneDrive - Universitetet i Oslo/Dokumenter/Undervisning/SOS4020_forkurs/data2023/data_tilDeling/"

norlag <- readRDS(paste0(utfilbane, "norlag.rds")) %>% 
  select(ref_nr, round, iodeltakelse, ioalder, iolandb, iokjonn, pa001c, pa300, hc230, hc231, va207, hcMCS12, hcPCS12 ) %>% 
  mutate(hcPCS12 = as.numeric(hcPCS12), 
         hcMCS12 = as.numeric(hcMCS12),
         ioalder = as.numeric(ioalder)) %>% 
  filter(!is.na(hc231))


# glimpse(norlag)
# levels(norlag$hc231)

```



## Kategoriske variabel  

### Stolpediagram 

```{r}
ggplot(norlag, aes(x = hc231)) +
  geom_bar() +
  theme(axis.text.x = element_text(angle = 90))
```

Noen ganger ønsker man å vise fordelingen for to ulike grupper, la oss si for kjønn. En mulighet er da å rett og slett lage to stolpediagram ved siden av hverandre. Til dette kan man legge til `facet_wrap(~iokjonn)` der altså *iokjonn* er variabelnavnet for kjønn. Hvert plot får da en automatisk tittel basert på verdiene på den variabelen (dvs. her: "factor levels"). 


```{r}
ggplot(norlag, aes(x = hc231)) +
  geom_bar(position="dodge") +
  facet_wrap(~iokjonn)+
  theme_minimal()+
  theme(axis.text.x = element_text(angle = 90))

```

Det kan da være en fordel å bruke farger ved å spesifisere `fill = ...`. Her er et eksempel: 

```{r}
ggplot(norlag, aes(x = hc231, fill = iokjonn)) +
  geom_bar() +
  theme(axis.text.x = element_text(angle = 90))
```

Et automatisk forvalg for `geom_bar()` er hvordan gruppene plasseres som er `position="stack"`. Det betyr at gruppene stables oppå hverandre. Dette er godt egnet hvis poenget er å vise hvor mange av hvert kjønn som er i hver gruppe. Det er mindre egnet hvis du ønsker å sammenligne menn og kvinner. Da er alternativet å velge `position="dodge"` som følger:  

```{r}
ggplot(norlag, aes(x = hc231, fill = iokjonn)) +
  geom_bar(position="dodge") +
  theme(axis.text.x = element_text(angle = 90))
```




### Kakediagram og satans verk 

Generelt er ikke kakediagram å anbefale da korrekt tolkning involverer å tolke et areal som inneholder vinkel. Med få kategorier som er rimelig forskjellig kan det gi et ok inntrykk, men ofte ender man opp med å måtte skrive på tallene likevel. 

```{r}
pc <- norlag %>% 
  group_by(hc231) %>% 
  summarise(n = n()) %>% 
  mutate(pct = n/sum(n)*100) %>% 
  ungroup()


ggplot(pc, aes(x = "", y = pct, fill = (hc231))) +
  geom_bar(stat="identity", width=1) +
  coord_polar("y", start=0) +
  theme_void()+
  geom_text( aes(label = paste0( round(pct,1), "%"), x = 1.4), 
            position = position_stack(vjust=.5), check_overlap = F) +
  labs(x = NULL, y = NULL, fill = NULL)+
  theme(axis.line = element_blank(),
          axis.text = element_blank(),
          axis.ticks = element_blank()) +
  scale_fill_brewer(palette="Blues", direction = -1)



```




## Kontinuerlige variable 


### Histogram 

```{r}
#| warning: false
#| error: false
#| message: false
ggplot(norlag, aes(x = hcPCS12)) +
  geom_histogram()
```

Det er også vanlig å fremstille det samme på en "tetthetsskala", der arealet summeres til 1. Det betyr at arealet for hvert intervall tilsvarer en andel. Visuelt sett er det vel så mye arealet vi oppfatter som høyden på stolpene. Men det er bare skalaen på y-aksen som har endret seg. Visuelt sett, ser histogrammene helt like ut. 

```{r}
#| warning: false
#| error: false
#| message: false
ggplot(norlag, aes(x = hcPCS12, y = ..density..)) +
  geom_histogram()
```



### Density plot 
Density plot er en måte å fremstille det samme på, men i stedet for å dele inn i intervaller som i histogram lager vi en glattet kurve. Det blir på skalaen "tetthet" som i histogrammet ovenfor. 


```{r}
#| warning: false
#| error: false
#| message: false
ggplot(norlag, aes(x = hcPCS12)) +
  geom_density()

```





```{r}
#| warning: false
#| error: false
#| message: false
ggplot(norlag, aes(x = hcPCS12)) +
  geom_histogram(aes(y = ..density..), fill = "lightgrey", col = "grey") +
  geom_density(col = "red", linewidth = 1) +
  theme_minimal()
```

En fordel med denne fremstillingen er at det er lettere å sammenligne grupper. Her er et eksempel med density plot etter hvor mye man drikker. 

```{r}
#| warning: false
#| error: false
#| message: false
#| 
ggplot(norlag, aes(x = hcPCS12, group = hc231, linetype = hc231)) +
  geom_density(linewidth = 1)+
  guides(fill = guide_legend(override.aes = list(shape = 1 ) ) ) +
  theme_minimal()


```


```{r}
#| warning: false
#| error: false
#| message: false
#| 
ggplot(norlag, aes(x = hcPCS12)) +
  geom_density(linewidth = 1)+
  theme_minimal()+
  facet_wrap(~hc231, scales="free")

```


```{r}
#| warning: false
#| error: false
#| message: false
#| 
ggplot(norlag, aes(x = hcPCS12,  fill = iokjonn)) +
  geom_density(alpha = .3)+
  guides(fill=guide_legend(title="Kjønn"))+
  theme_minimal()


```


### Flere variable samtidig 


####  Boksplot 


```{r}
#| warning: false
#| message: false
#| error : false
ggplot(norlag, aes(x = hcPCS12, group = hc231)) +
  geom_boxplot()+
  theme_minimal()+
  coord_flip()
```





#### Scatterplot 

```{r}
#| warning: false
#| message: false
#| error : false
glimpse(norlag)

ggplot(norlag, aes(x = ioalder, y = hcPCS12)) +
  geom_point(alpha=.3)+
  theme_minimal()
```

```{r}
#| warning: false
#| message: false
#| error : false
ggplot(norlag, aes(x = ioalder, y = hcPCS12)) +
  geom_jitter(alpha=.1, width = .3)+
  theme_minimal()
```



#### Ridgeplot 

Ridgeplot er en annen måte å sammenligne en kontinuerlig fordeling betinget på en gruppering. 
```{r}
#| warning: false
#| message: false
#| error : false
library(ggridges)
ggplot( filter(norlag, !is.na(iolandb)),  aes(y = iolandb, x = hcPCS12)) +
  geom_density_ridges() 
```


## Andre greier 


