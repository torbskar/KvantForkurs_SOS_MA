# Import av data fra Sikt - håndtering av formater med metadata 


```{r}
#| warning: false
#| echo: false
#| error: false
library(tidyverse)
library(haven)
library(labelled)

```


For de som vil ha en litt mer utfordring kan man lese inn filen i Stata-format. Dette er slik det blir levert fra Sikt^[Det kan sies mye om å levere ut data på denne måten, men det vil ikke ta seg ut å gjøre det i undervisningsmateriale.]

Stata-formatet dta har to utfordringer når vi importerer til R. Det er tilsvarende problemstilling hvis man importerer fra SPSS eller SAS. For det første er det noen ganger gitt en egen kode for manglende verdi, såkalt "missing". For det andre lagres informasjonen på en annen måte enn i R. I Stata er ofte kategoriske variable lagret som en numerisk variabel med en tilhørende "label". Når man leser inn dta-fil til R vil disse variablene være av typen "labelled". I R er det langt bedre å gjøre de om til factor-variable, men det er litt styr å kode om hvis det er veldig mange variable i datasettet - slik det ofte er i surveydata. 

Vi presenterer en samlet løsning først, så tar vi hver del for seg etterpå for å forklare. Nedenforstående kode gjør omtrent følgende: 

* Leser inn en dta-fil
* Omkoder alle spesifiserte missing-verdier til NA. Dette gjøres for *alle* variable i hele datasettet (altså hundrevis av variable)
* Fjerner alle labler som ikke er i bruk (altså: labler for ulike missing-verdier)
* Gjør om alle variable av typen "labelled" til factor-variable 

```{r}
#| warning: false
#| echo: false
#| error: false
infilbane <- "C:/Users/torbskar/OneDrive - Universitetet i Oslo/Dokumenter/Undervisning/SOS4020_forkurs/data2023/rOBH3y10/"

utfilbane <- "C:/Users/torbskar/OneDrive - Universitetet i Oslo/Dokumenter/Undervisning/SOS4020_forkurs/data2023/data_tilDeling/"


```


```{r}
#| eval: false
#| warning: false
#| error: false
library(tidyverse)
library(haven)
library(labelled)


faste <- read_stata( paste0(infilbane, "NorLAG-lengde-faste.dta"), encoding = "utf-8")
lang <- read_stata( paste0(infilbane, "NorLAG-lengde-intervju.dta"), encoding = "utf-8")


norlag <- merge(faste, lang, by = "ref_nr") %>% 
  filter(iodeltakelse == 1 |  
           iodeltakelse == 2 & round %in% c(1, 3) | 
           iodeltakelse == 3 & round %in% c(2, 3) |
           iodeltakelse == 4 & round %in% c(1) |
           iodeltakelse == 5 & round %in% c(1, 2) |
           iodeltakelse == 6 & round %in% c(2)
  ) %>% 
  # generelle missing
  mutate(across( where(is.labelled) ,  ~replace(., 
                                                . %in% c(997, 998, 999, 99999, 999999), 
                                                NA))) %>%
  # noen spesielle missing - som kanskje gjelder overalt?
  mutate(across(where(is.labelled) ,  ~replace(., 
                                               . %in% c(994, 995, 996, 9996), 
                                               NA))) %>%
  # noen spesielle missing - som kanskje gjelder overalt?
  mutate(across(where(is.labelled) ,  ~replace(., 
                                               . %in% c(9993, 9994, 9995, 9996, 9997, 9998, 9999), 
                                               NA))) %>%
  # inpartbankinnsk og fremover
  mutate(across(where(is.labelled) ,  ~replace(., 
                                               . %in% c(99999996,
                                                        999999995,
                                                        999999996,
                                                        999999999), 
                                               NA))) %>%
  mutate(across(where(is.labelled), ~replace(. ,
                                             str_sub(tolower(.), 1, 7) == "filter:", NA))) %>% 
  #mutate(across(where(is.labelled), ~drop_unused_value_labels(.))) %>% 
  # Noen spesielle der drop_unused_value_labels() ikke funker (f.eks. hc135). Gjør til factor og rydder etterpå. 
  mutate(across(where(is.labelled), ~as_factor(.))) %>% 
  mutate(across(where(is.factor), ~fct_drop(.)))


## Omkoder hovedaktivitet ####
fs <- lvls_union( list(norlag$wr001, norlag$wr002, norlag$wr003c)) %>% tolower() %>% unique()

norlag <- norlag %>% 
  mutate(across(wr001:wr003c, ~factor(tolower(.), levels=fs))) %>% 
  mutate(hovedaktivitet = case_when(round == 1 ~ wr001, 
                                    round == 2 ~ wr002, 
                                    round == 3 ~ wr003c) ) %>% 
  mutate(hovedaktivitet2 = case_when( str_sub(hovedaktivitet, 1, 5) == "yrkes" ~ "Yrkesaktiv", 
                                      str_detect(hovedaktivitet, "arbeidsledig") ~ "Trygdet/arbeidsledig/stud/annet", 
                                      str_detect(hovedaktivitet, "student") ~ "Trygdet/arbeidsledig/stud/annet", 
                                      str_detect(hovedaktivitet, "trygd") ~ "Trygdet/arbeidsledig/stud/annet", 
                                      str_detect(hovedaktivitet, "annet") ~ "Trygdet/arbeidsledig/stud/annet", 
                                      str_sub(hovedaktivitet,1,6)   == "hjemme" ~ "hjemmeværende/husmor", 
                                      str_detect(hovedaktivitet, "pensjonist") ~ "pensjonist", 
                                      is.na(hovedaktivitet) ~ "Trygdet/arbeidsledig/stud/annet") %>% as_factor())


saveRDS(norlag, paste0(utfilbane, "norlag.rds"))
```

```{r}
# glimpse(norlag[,30:40])
# 
# levels(norlag$pr003c)
# summary(norlag$pr003c)
# 
# look_for(norlag, "994")

```




Og dermed har vi et datasett i et svært så ryddig R-format. 



## Hvordan fungerer koden ovenfor?? En intro til mer avansert databehandling


### Sjekk datastruktur og bruk av `filter`


### Omkode bruker-spesifiserte missing-verdier til `NA`


### Kode om på tvers av mange variable med `across` 


### Fjerne nivåer som ikke brukes: `drop_unused_value_labels`


### Gjør om til factor med `unlabelled`


## For spesielt interesserte: jobbe med labelled-data


